(deflisten wifi-list :initial "" "scripts/network/get-network-list")
(defpoll is-lan-available :interval "1s" :initial false "scripts/network/is-ethernet-avialable")
(defpoll is-wifi-on :interval "1s" :initial false "nmcli radio wifi")

(defwindow network-selector-closer
  :monitor '["<primary>", 1, 0]'
  :geometry (geometry :width "100%" :height "100%")
  :stacking "fg"
  :focusable false
  (closer :window "network-selector"))

(defwindow network-selector
  :monitor '["<primary>", 1, 0]'
  :geometry (geometry :width "15%"
                      :height "30px"
                      :anchor "top right")
  :stacking "overlay"
  :exclusive false
  (box :class "ssid-list" :orientation "vertical" :space-evenly false

    ; Dynamic wifi list
    (literal :content wifi-list)

    ; Turn Wifi on/off
    (revealer :reveal {is-wifi-on=="enabled"} :transition "slidedown"
      (button :class "ssid" :onclick "nmcli radio wifi off &" 
        (label :text "Turn off WIFI" :xalign 0)))
    (revealer :reveal {is-wifi-on=="disabled"} :transition "slidedown"
      (button :class "ssid" :onclick "nmcli radio wifi on &" 
        (label :text "Turn on WIFI" :xalign 0)))

    ; Connect to Ethernet when available
    (revealer :reveal is-lan-available :transition "slidedown"
      (button :class "ssid" :onclick "scripts/network/connect-to-ethernet" 
        (label :text "Ethernet" :xalign 0)))))

; is used to create the dynamic ssid list with the get-network-list script
(defwidget ssid-list-element[ssid signal security]
  (button :class "ssid" :onclick "scripts/network/connect-to-wifi ${ssid} &"
     (icon-text 
         :icon_path "bar/img/network/${ signal < 30 ? "unusable.svg" 
                : signal < 50 ? "weak.svg" 
                : signal < 70 ? "fair.svg" 
                : signal < 90 ? "good.svg" 
                : "excellent.svg" }" 
         :image-height 15
         :text "${ssid}"
         :subtext "${security == "" ? "open" : "${security}"}")))
